<?php
// $Id: quickpaylite.install,v 1.5 2010/06/25 12:31:27 googletorp Exp $

/**
 * @file
 * Install file for quickpaylite.
 */

/**
 * Implementation of hook_install().
 */
function quickpaylite_install() {
  // Create tables.
  drupal_install_schema('quickpaylite');

  // Inserting default implementation.
  db_query("INSERT INTO {quickpaylite_implementations} (api_module, api_delta) VALUES ('quickpaylite', 'default')");
}

/**
 * Implementation of hook_uninstall().
 */
function quickpaylite_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('quickpaylite');
  // Delete quickpaylite variables from the db:
  db_query("DELETE FROM {variable} WHERE name LIKE 'quickpaylite_%%';");
}

/**
 * Implementation of hook_schema().
 */
function quickpaylite_schema() {
  $schema['quickpaylite_transactions'] = array(
    'description' => t('Stores quickpaylite transactions'),
    'fields' => array(
      'transaction_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      // Settings.
      'currency' => array(
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The quickpaylite currency code used.'),
      ),
      'autocapture' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the transaction is autocapture.'),
      ),
      'autofee' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the payment fee should be added to the transaction.'),
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => 'da',
        'description' => t('The language used on the screen.'),
      ),
      // Data
      'amount' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => t('The amount to be paid in the transaction.'),
      ),
      'ordernumber' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The order id'),
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('Order description'),
      ),
      // Aditional info.
      'payment_time' => array(
        'type' => 'int',
        'description' => t('Payment time stored as a UNIX timestamp'),
        'not null' => FALSE,
      ),
      'transaction_type' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => 'paymentwindow',
        'description' => t('The type of transaction used, fx standardwindow.'),
      ),
      'customer_uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => '{users}.uid of the user making the transaction',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => 'in progress',
        'description' => t('The status of the transaction'),
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('A unique has used as identifier'),
      ),
      'data' => array(
        'type' => 'text',
        'description' => t('Serialized data that custom modules can use to save specific info.'),
      ),
    ),
    'indexes' => array(
      'payment_time' => array('payment_time'),
      'status' => array('status'),
      'ordernumber' => array('ordernumber'),
      'customer_uid' => array('customer_uid'),
    ),
    'unique keys' => array(
      'hash' => array('hash'),
    ),
    'primary key' => array('transaction_id'),
  );

  $schema['quickpaylite_implementations'] = array(
    'description' => t('Stores settings info on the different quickpaylite implementations'),
    'fields' => array(
      'implementation_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Implementation ID.'),
      ),
      'api_module' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API module name'),
      ),
      'api_delta' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('API delta value'),
      ),
      'merchant' => array(
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The quickpaylite merchant number.'),
      ),
      'md5check' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The md5 password used for the transaction.'),
      ),
      'currency' => array(
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The quickpaylite currency code used.'),
      ),
      'autocapture' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the transaction is autocapture.'),
      ),
      'autofee' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the payment fee should be added to the transaction.'),
      ),
      'testmode' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => t('Whether or not the test mode should be used for transactions.'),
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => 'da',
        'description' => t('The language used on the screen.'),
      ),
    ),
    'primary key' => array('implementation_id'),
    'unique keys' => array(
      'api_id' => array('api_module', 'api_delta'),
    ),
  );

  $schema['quickpaylite_transaction_logs'] = array(
    'description' => t('Logs of events happening during payment processing.'),
    'fields' => array(
      'log_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Log ID.'),
      ),
      'transaction_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The {quickpaylite_transactions}.transaction_id of the transaction.'),
      ),
      'log_message' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The message on the log'),
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
        'description' => t('The status that the transaction was set to.'),
      ),
      'time' => array(
        'type' => 'int',
        'description' => t('Log time stored as a UNIX timestamp'),
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('log_id'),
    'indexes' => array(
      'status' => array('status'),
    ),
    'indexes' => array(
      'transaction_id' => array('transaction_id'),
    ),
  );

  return $schema;
}
