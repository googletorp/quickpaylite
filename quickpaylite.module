<?php
// $Id$

/**
 * @file
 * Provides a simple integration of Quickpay payment
 *
 * This is the simple method with HTML templates and such that doesn't require
 * you to have an SSL certificate. The payment page is routed through Quickpay's
 * SSL proxy.
 */

/**
 * Implementation of hook_menu().
 */
function quickpaylite_menu() {
  $items = array();

  $items['admin/build/quickpaylite'] = array(
    'title' => 'Scaffolding',
    'description' => 'Manage records',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_overview_form'),
    'access arguments' => array('administer scaffolding data'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/build/quickpaylite/sorted'] = array(
    'title' => 'Sorted list',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/build/quickpaylite/pager'] = array(
    'title' => 'Paged list',
    'description' => 'Manage records',
    'page callback' => 'quickpaylite_overview_pager',
    'access arguments' => array('administer scaffolding data'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/build/quickpaylite/add'] = array(
    'title' => 'Add record',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_form'),
    'access arguments' => array('administer scaffolding data'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/build/quickpaylite/%quickpaylite_record/edit'] = array(
    'title' => 'Edit record',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_form', 3),
    'access arguments' => array('administer scaffolding data'),
    'type' => MENU_CALLBACK,
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/build/quickpaylite/%quickpaylite_record/delete'] = array(
    'title' => 'Delete record',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_delete_confirm', 3),
    'access arguments' => array('administer scaffolding data'),
    'type' => MENU_CALLBACK,
    'file' => 'quickpaylite.admin.inc',
  );

  $items['quickpaylite'] = array(
    'title' => 'Scaffolding records',
    'description' => 'Lists records saved by the Scaffolding Example module.',
    'page callback' => 'quickpaylite_page',
    'access arguments' => array('view content'),
    'file' => 'quickpaylite.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access.
 */
function quickpaylite_perm() {
  return array('administer scaffolding data');
}

/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function quickpaylite_theme() {
  $items = array();
  $items['quickpaylite_overview_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'quickpaylite.admin.inc',
  );
  $items['quickpaylite_record'] = array(
    'arguments' => array('record' => array()),
    'file' => 'quickpaylite.pages.inc',
  );
  return $items;
}

/**
 * Loader function for individual records.
 *
 * Because we use '%quickpaylite_record' as a wildcard in our hook_menu()
 * handler, this function will also be called automatically when we go to edit
 * or delete a record. Thanks, Menu API!.
 *
 * @param $record_id
 *   An int containing the ID of a record.
 * @return
 *   A single record in array format, or FALSE if none matched the incoming ID.
 */
function quickpaylite_record_load($record_id) {
  $sql = "SELECT * FROM {scaffolding_record} WHERE record_id = %d";
  $result = db_query($sql, $record_id);
  if ($record = db_fetch_array($result)) {
    return $record;
  }
  else {
    return FALSE;
  }
}

/**
 * Public loader function for the full collection of records.
 *
 * In situations where the module's data rarely changes, or is being used
 * frequently (for example, loaded and processed on every page load), this
 * is a prime candidate for caching. See The Beginner's Guide to Caching at
 * http://www.lullabot.com/articles/a_beginners_guide_to_caching_data for more
 * details.
 *
 * This function assumes that results should be sorted by 'weight' -- if your
 * module doesn't store a weight column on its records, or if you need to sort
 * on some other property, this function's SQL should be updated as well.
 *
 * @return
 *   An array of all records, keyed by id.
 */
function quickpaylite_record_load_all() {
  $sql = 'SELECT * FROM {scaffolding_record} ORDER BY weight ASC';
  $result = db_query($sql);

  $records = array();
  while ($record = db_fetch_array($result)) {
    $records[$record['record_id']] = $record;
  }
  return $records;
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * Automatically inserts or updates, based on whether the record's unique ID has
 * been set yet. Because drupal_write_record() updates the record itself (adding
 * the unique ID after the database has been updated), we return the record
 * after saving it.
 *
 * This allows any calling function to check the id of the returned record and
 * act on the ID as needed (redirecting to a 'view' page after inserting, etc).
 *
 * @param $record
 *   A record to be saved. If $record['record_id'] is set, the record will be updated.
 *   Otherwise, a new record will be inserted into the database.
 * @return
 *   The saved record, with its ID set.
 */
function quickpaylite_record_save($record) {
  if (isset($record['record_id'])) {
    drupal_write_record('scaffolding_record', $record, 'record_id');
  }
  else {
    drupal_write_record('scaffolding_record', $record);
  }
  return $record;
}

/**
 * Deletes a record, given its unique ID.
 *
 * @param $record_id
 *   An int containing the ID of a record.
 */
function quickpaylite_record_delete($record_id) {
  $sql = 'DELETE FROM {scaffolding_record} WHERE record_id = %d';
  db_query($sql, $record_id);
}
