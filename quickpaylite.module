<?php

define(QUICKPAYLITE_PAYMENT_WINDOW, 'https://secure.quickpay.dk/form/');
// The protocol version we implement.
define(QUICKPAYLITE_VERSION, '3');

/**
 * @file
 * Provides a simple integration of Quickpay payment
 *
 * This is the simple method with HTML templates and such that doesn't require
 * you to have an SSL certificate. The payment page is routed through Quickpay's
 * SSL proxy.
 */

/**
 * Implementation of hook_menu().
 */
function quickpaylite_menu() {
  $items = array();

  $items['admin/settings/quickpaylite'] = array(
    'title' => 'Quickpay lite default settings',
    'description' => 'Here you can setup and configure your Quickpay lite payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_settings_form'),
    'access arguments' => array('administer quickpaylite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/settings/quickpaylite/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    '#weight' => -1,
  );

  $items['admin/settings/quickpaylite/list'] = array(
    'title' => 'List implementations',
    'description' => 'Show a list of all enabled payment implementations.',
    'page callback' => 'quickpaylite_admin_list_implementations',
    'access arguments' => array('administer quickpaylite'),
    'file' => 'quickpaylite.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/quickpaylite/edit/%/%'] = array(
    'title' => 'Change quickpaylite implementation settings',
    'description' => 'Here you can setup and configure your quickpaylite payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_admin_settings_form', 4, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer quickpaylite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/settings/quickpaylite/transactions'] = array(
    'title' => 'quickpaylite transactions',
    'description' => 'A table of the transactions made with the quickpaylite module.',
    'page callback' => 'quickpaylite_admin_transactions',
    'access arguments' => array('administer quickpaylite transactions'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quickpaylite.admin.inc',
    '#weight' => 0,
  );

  $items['admin/settings/quickpaylite/transaction/%quickpaylite_transaction/logs'] = array(
    'title' => 'quickpaylite transaction logs',
    'description' => 'A table of the logs for a transaction made with the quickpaylite module.',
    'page callback' => 'quickpaylite_admin_transaction_logs',
    'page arguments' => array(4),
    'access arguments' => array('administer quickpaylite transaction logs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quickpaylite.admin.inc',
    '#weight' => 0,
  );

  $items['payment/quickpaylite/callback/%quickpaylite_hash'] = array(
    'title' => 'quickpaylite callback url',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/quickpaylite/continue/%quickpaylite_hash'] = array(
    'title' => 'Payment accepted',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_complete',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/quickpaylite/cancel/%quickpaylite_hash'] = array(
    'title' => 'Payment cancelled',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_cancel',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access.
 */
function quickpaylite_perm() {
  return array('administer Quickpay lite', 'make payments with Quickpay lite');
}

/**
 * Create a record in the {quickpaylite_transaction_logs} table.
 *
 * @param int $transaction_id
 *    The id of the transaction to send a message about.
 * @param string $status
 *    The status on the transaction.
 * @param string $message
 *    A message to store in the log.
 * @param boolean $update
 *    Indicator to set, if the transaction status should be updated.
 */
function quickpaylite_create_log($transaction_id, $status, $message='', $update=TRUE) {
  $record = array(
    'transaction_id' => $transaction_id,
    'status' => $status,
    'log_message' => $message,
    'time' => time(),
  );
  drupal_write_record('quickpaylite_transaction_logs', $record);
  if ($update) {
    db_query("UPDATE {quickpaylite_transactions} SET status = '%s' WHERE transaction_id = %d;", $status, $transaction_id);
  }
}

/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function quickpaylite_theme() {
  return array(
    'quickpaylite_complete_page' => array(
      'template' => 'quickpaylite-complete-page',
      'arguments' => array('transaction' => NULL),
      'file' => 'quickpaylite.theme.inc',
    ),
    'quickpaylite_cancel_page' => array(
      'template' => 'quickpaylite-cancel-page',
      'arguments' => array('transaction' => NULL),
      'file' => 'quickpaylite.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_quickpayliteapi().
 *
 * The settings for option "default" will be used as fall back for other implementations.
 */
function quickpaylite_quickpayliteapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['default'] = array('info' => t('Default'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
  }
}

/**
 * API function for other modules used to create a form for quickpaylite.
 *
 * @param string $op
 *    Currently not used, can be used to specify which type of form is needed.
 * @param array $data
 *    The data for the transaction containing module implementing the transaction and
 *    data on the actual transaction itself.
 */
function quickpaylite_make_transaction($data, $op='standardwindow') {
  if (isset($data['data'])) {
    $data['data'] = serialize($data['data']);
  }

  $default = array(
    'api_module' => 'quickpaylite',
    'api_delta' => 'default',
    'protocol' => QUICKPAYLITE_VERSION,
    'msgtype' => '',
    'merchant' => '',
    'language' => '',
    'ordernumber' => '',
    'amount' => '',
    'currency' => '',
    'continueurl' => '',
    'cancelurl' => '',
    'callbackurl' => '',
    'autocapture' => '',
    'autofee' => '',
    'cardtypelock' => '',
    'description' => '',
    'testmode' => '',
    'customer_uid' => $_GLOBALS['user']->uid,
    'payment_time' => time(),
  );

  $values = array_merge($default, $data);
  // Get settings info.
  $settings = quickpaylite_load_settings($merged_default['api_module'], $merged_default['api_delta']);

  // Fill out empty data with settings.
  foreach ($settings as $key => $value) {
    if (!isset($values[$key]) || empty($values[$key])) {
      $values[$key] = $settings[$key];
    }
  }

  // Create unique hash that can be used as identifier.
  $values['hash'] = sha1(time() . drupal_get_private_key());
  $transaction = (object) $values;
  $transaction->transaction_type = $op;
  drupal_write_record('quickpaylite_transactions', $transaction);

  // Return empty array if no amount or marchant number is present.
  if ($values['amount'] < 1 || empty($values['merchant'])) {
    quickpaylite_create_log($transaction->transaction_id, 'error', 'Invalid transaction, no amount or merchant number present');
    return '';
  }
  switch ($op) {
    case 'standardwindow':
    default:
      quickpaylite_create_log($transaction->transaction_id, 'in progress', 'Created standard window form.');
      return _quickpaylite_get_standardwindow($values, TRUE);
      break;
  }
}

/**
 * Load implemention settings, defaults to the quickpaylite settings.
 *
 * @param string $api_module
 *    The name of the module that has implemented hook_quickpayliteapi op info
 * @param string $api_delta
 *    The delta of the implemented hook_quickpayliteapi op info.
 *
 * @return array
 */
function quickpaylite_load_settings($api_module='quickpaylite', $api_delta='default') {
  $default_settings = array(
    'merchant' => variable_get('quickpaylite_merchant', ''),
    'md5check' => variable_get('quickpaylite_md5check', ''),
    'currency' => variable_get('quickpaylite_currency', ''),
    'autofee' => variable_get('quickpaylite_autofee', FALSE),
    'autocapture' => variable_get('quickpaylite_autocapture', FALSE),
    'testmode' => variable_get('quickpaylite_testmode', FALSE),
    'language' => variable_get('quickpaylite_hosted_language', 'en'),
  );

  $settings = db_fetch_array(db_query("SELECT * FROM {quickpaylite_implementations} WHERE api_module = '%s' AND api_delta = '%s';", $api_module, $api_delta));
  // Get default if no settings was found or the merchant what not set.
  if ($settings == FALSE || empty($settings['merchant'])) {
    $settings = db_fetch_array(db_query("SELECT * FROM {quickpaylite_implementations} WHERE api_module = 'quickpaylite' AND api_delta = 'default';"));
  }

  if (!is_array($settings)) {
    return $default_settings;
  }

  foreach ($default_settings as $key => $value) {
    if (!isset($settings[$key]) || empty($settings[$key])) {
      $settings[$key] = $default_settings[$key];
    }
  }

  return $settings;
}

/**
 * Load function to get a transaction object from a hash
 *
 * @param string $hash
 *    The hash of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function quickpaylite_hash_load($hash) {
  return db_fetch_object(db_query("SELECT * FROM {quickpaylite_transactions} WHERE hash = '%s';", $hash));
}

/**
 * Load function to get a transaction object from a transaction id.
 *
 * @param int $transaction_id
 *    The id of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function quickpaylite_transaction_load($transaction_id) {
  return db_fetch_object(db_query("SELECT * FROM {quickpaylite_transactions} WHERE transaction_id = %d;", $transaction_id));
}

/**
 * Menu callback, called by quickpaylite when the payment is accepted before the redirect.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_callback($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'captured', 'Registrered callback call from quickpaylite');
  $function = $transaction->api_module . '_quickpayliteapi';
  if (function_exists($function)) {
    $function('transaction_callback', $transaction->api_delta, $transaction);
  }
  exit();
}

/**
 * Menu callback, quickpaylite redirects to this url when the payment is accepted.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_complete($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'completed', 'User returned to the accept url');
  $transaction->theme = 'quickpaylite_complete_page';
  $function = $transaction->api_module . '_quickpayliteapi';
  if (function_exists($function)) {
    $function('transaction_complete', $transaction->api_delta, $transaction);
  }
  if (isset($transaction->redirect) && !empty($transaction->redirect)) {
    return drupal_goto($transaction->redirect);
  }
  return theme($transaction->theme, $transaction);
}

/**
 * Menu callback, quickpaylite redirects to this url when the payment is declined.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_cancel($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'canceled', 'User returned to the decline url');
  $transaction->theme = 'quickpaylite_cancel_page';
  $function = $transaction->api_module . '_quickpayliteapi';
  if (function_exists($function)) {
    $function('transaction_cancel', $transaction->api_delta, $transaction);
  }
  if (isset($transaction->redirect) && !empty($transaction->redirect)) {
    return drupal_goto($transaction->redirect);
  }
  return theme($transaction->theme, $transaction);
}

/**
 * Wrapper function to get the quickpaylite payment window and store info about the transaction.
 */
function _quickpaylite_get_standardwindow($data, $add_js) {
  if ($add_js === TRUE) {
    drupal_add_js(drupal_get_path('module', 'quickpaylite') . '/quickpaylite.js');
  }
  return drupal_get_form('quickpaylite_standard_window_form', $data);
}

/**
 * Form to create a form for the standard window.
 *
 * @param array $settings
 *  An array containing all the settings - info stored from the admin backend.
 * @param array $data
 *    The actual data for the transaction, like the amount etc.
 *
 * @return array $form
 *    Returns the form definition array.
 */
function quickpaylite_standard_window_form($form_state, $data) {
  global $base_url;
  $hash = $data['hash'];

  $overrides = array(
    'continueurl' => "$base_url/payment/quickpaylite/continue/$hash",
    'cancelurl' => "$base_url/payment/quickpaylite/cancel/$hash",
    'callbackurl' => "$base_url/payment/quickpaylite/callback/$hash",
  );

  $data = $overrides + $data;

  if ($data['testmode']) {
    $data['ordernumber'] .= 'TEST';
  }

  $md5_order = array(
    'protocol',
    'msgtype',
    'merchant',
    'language',
    'ordernumber',
    'amount',
    'currency',
    'continueurl',
    'cancelurl',
    'callbackurl',
    'autocapture',
    'autofee',
    'cardtypelock',
    'description',
    'testmode',
  );

  $md5_string = "";
  foreach ($md5_order as $field) {
    $md5_string .= $data[$field];
  }

  $md5check = md5($md5_string . variable_get('quickpaylite_secret', ''));

  $form = array(
    '#action' => QUICKPAYLITE_PAYMENT_WINDOW,
    '#id' => "quickpaylite",
  );

  $form['protocol'] = array(
    '#type' => 'hidden',
    '#value' => $data['protocol'],
  );

  $form['msgtype'] = array(
    '#type' => 'hidden',
    '#value' => $data['msgtype'],
  );

  $form['merchant'] = array(
    '#type' => 'hidden',
    '#value' => $data['merchant'],
  );

  $form['language'] = array(
    '#type' => 'hidden',
    '#value' => $data['language'],
  );

  $form['ordernumber'] = array(
    '#type' => 'hidden',
    '#value' => $data['ordernumber'],
  );

  $form['amount'] = array(
    '#type' => 'hidden',
    '#value' => $data['amount'],
  );

  $form['currency'] = array(
    '#type' => 'hidden',
    '#value' => $data['currency'],
  );

  $form['continueurl'] = array(
    '#type' => 'hidden',
    '#value' => $data['continueurl'],
  );

  $form['cancelurl'] = array(
    '#type' => 'hidden',
    '#value' => $data['cancelurl'],
  );

  $form['callbackurl'] = array(
    '#type' => 'hidden',
    '#value' => $data['callbackurl'],
  );

  $form['autocapture'] = array(
    '#type' => 'hidden',
    '#value' => $data['autocapture'],
  );

  $form['autofee'] = array(
    '#type' => 'hidden',
    '#value' => $data['autofee'],
  );

  $form['cardtypelock'] = array(
    '#type' => 'hidden',
    '#value' => $data['cardtypelock'],
  );

  $form['description'] = array(
    '#type' => 'hidden',
    '#value' => $data['description'],
  );

  $form['testmode'] = array(
    '#type' => 'hidden',
    '#value' => $data['testmode'],
  );

  $form['md5check'] = array(
    '#type' => 'hidden',
    '#value' => $md5check,
  );

  // Executing the hook_quickpayliteapi_form_alter
  $func = $data['api_module'] .'_quickpaylite_form_alter';
  if (function_exists($func)) {
    $func($form, $data['api_delta']);
  }

  return $form;
}


/**
 * Returns a list of all standard currencies used by quickpaylite.
 */
function quickpaylite_currencies() {
  return array(
    'DKK' => t('Danske kroner'),
    'SEK' => t('Svenske kroner'),
    'NOK' => t('Norske kroner'),
    'EUR' => t('Euro'),
    'USD' => t('US Dollar'),
  );
}
