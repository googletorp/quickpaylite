<?php
// $Id$

define(QUICKPAYLITE_PAYMENT_WINDOW, 'https://secure.quickpay.dk/form/');
// The protocol version we implement.
define(QUICKPAYLITE_VERSION, '3');

/**
 * @file
 * Provides a simple integration of Quickpay payment
 *
 * This is the simple method with HTML templates and such that doesn't require
 * you to have an SSL certificate. The payment page is routed through Quickpay's
 * SSL proxy.
 */

/**
 * Implementation of hook_menu().
 */
function quickpaylite_menu() {
  $items = array();

  $items['admin/quickpaylite'] = array(
    'title' => 'Quickpay lite',
    'description' => 'List Quickpay lite payments',
    'page callback' => 'quickpaylite_overview_pager',
    'access arguments' => array('administer Quickpay lite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/quickpaylite/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/quickpaylite/settings'] = array(
    'title' => 'Quickpay lite settings',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_settings_form'),
    'access arguments' => array('administer Quickpay lite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['payment/quickpaylite/callback/%quickpaylite_hash'] = array(
    'title' => 'quickpaylite callback url',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/quickpaylite/accept/%quickpaylite_hash'] = array(
    'title' => 'quickpaylite payment accepted',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_complete',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['payment/quickpaylite/decline/%quickpaylite_hash'] = array(
    'title' => 'quickpaylite payment cancelled',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_transaction_cancel',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access.
 */
function quickpaylite_perm() {
  return array('administer Quickpay lite', 'make payments with Quickpay lite');
}

/**
 * Create a record in the {quickpaylite_transaction_logs} table.
 *
 * @param int $transaction_id
 *    The id of the transaction to send a message about.
 * @param string $status
 *    The status on the transaction.
 * @param string $message
 *    A message to store in the log.
 * @param boolean $update
 *    Indicator to set, if the transaction status should be updated.
 */
function quickpaylite_create_log($transaction_id, $status, $message='', $update=TRUE) {
  $record = array(
    'transaction_id' => $transaction_id,
    'status' => $status,
    'log_message' => $message,
    'time' => time(),
  );
  drupal_write_record('quickpaylite_transaction_logs', $record);
  if ($update) {
    db_query("UPDATE {quickpaylite_transactions} SET status = '%s' WHERE transaction_id = %d;", $status, $transaction_id);
  }
}

/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function quickpaylite_theme() {
  $items = array();
  $items['quickpaylite_overview_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'quickpaylite.admin.inc',
  );
  $items['quickpaylite_record'] = array(
    'arguments' => array('record' => array()),
    'file' => 'quickpaylite.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_quickpayliteapi().
 *
 * The settings for option "default" will be used as fall back for other implementations.
 */
function quickpaylite_quickpayliteapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['default'] = array('info' => t('Default'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
  }
}

/**
 * API function for other modules used to create a form for quickpaylite.
 *
 * @param string $op
 *    Currently not used, can be used to specify which type of form is needed.
 * @param array $data
 *    The data for the transaction containing module implementing the transaction and
 *    data on the actual transaction itself.
 */
function quickpaylite_make_transaction($data, $op='standardwindow') {
  $default = array(
    'amount' => '',
    'order_id' => '',
    'ordre_text' => '',
    'description_text' => '',
    'api_module' => '',
    'api_delta' => '',
  );
  $merged_default = array_merge($default, $data);
  // Get settings info.
  $settings = quickpaylite_load_settings($merged_default['api_module'], $merged_default['api_delta']);
  // Create the values used in the transaction based on default (empty) values and settings.
  // It is possible to overwrite all settings with the $data array.
  $values = array_merge($settings, $merged_default);
  // Create unique hash that can be used as identifier.
  $values['hash'] = sha1(time() . drupal_get_private_key());
  $transaction = (object) array_merge(array('payment_time' => time(), 'customer_uid' => $_GLOBALS['user']->uid), $values);
  $transaction->transaction_type = $op;
  drupal_write_record('quickpaylite_transactions', $transaction);
  // Return empty array if no amount or marchant number is present.
  if ($values['amount'] < 1 || empty($values['merchant'])) {
    quickpaylite_create_log($transaction->transaction_id, 'error', 'Invalid transaction, no amount or merchant number present');
    return array();
  }
  switch ($op) {
    case 'standardwindow':
    default:
      quickpaylite_create_log($transaction->transaction_id, 'in progress', 'Created standard window form.');
      return _quickpaylite_get_standardwindow($values, TRUE);
      break;
  }
}

/**
 * Load implemention settings, defaults to the quickpaylite settings.
 *
 * @param string $api_module
 *    The name of the module that has implemented hook_quickpayliteapi op info
 * @param string $api_delta
 *    The delta of the implemented hook_quickpayliteapi op info.
 *
 * @return array
 */
function quickpaylite_load_settings($api_module='quickpaylite', $api_delta='default') {
  $settings = db_fetch_array(db_query("SELECT * FROM {quickpaylite_implementations} WHERE api_module = '%s' AND api_delta = '%s';", $api_module, $api_delta));
  // Get default if no settings was found or the merchant what not set.
  if ($settings == FALSE || empty($settings['merchant'])) {
    $settings = db_fetch_array(db_query("SELECT * FROM {quickpaylite_implementations} WHERE api_module = 'quickpaylite' AND api_delta = 'default';"));
  }
  // Failsafe, return empty array if no data was available.
  return $settings ? $settings : array();
}

/**
 * Load function to get a transaction object from a hash
 *
 * @param string $hash
 *    The hash of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function quickpaylite_hash_load($hash) {
  return db_fetch_object(db_query("SELECT * FROM {quickpaylite_transactions} WHERE hash = '%s';", $hash));
}

/**
 * Load function to get a transaction object from a transaction id.
 *
 * @param int $transaction_id
 *    The id of a transaction.
 *
 * @return object
 *    Transaction object.
 */
function quickpaylite_transaction_load($transaction_id) {
  return db_fetch_object(db_query("SELECT * FROM {quickpaylite_transactions} WHERE transaction_id = %d;", $transaction_id));
}

/**
 * Menu callback, called by quickpaylite when the payment is accepted before the redirect.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_callback($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'captured', 'Registrered callback call from quickpaylite');
  module_invoke($transaction->api_module, 'quickpayliteapi', 'transaction_callback', $transaction->api_delta, $transaction);
  exit();
}

/**
 * Menu callback, quickpaylite redirects to this url when the payment is accepted.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_complete($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'completed', 'User returned to the accept url');
  $transaction->theme = 'quickpaylite_accept_page';
  module_invoke($transaction->api_module, 'quickpayliteapi', 'transaction_complete', $transaction->api_delta, $transaction);
  if (isset($transaction->redirect) && !empty($transaction->redirect)) {
    return drupal_goto($transaction->redirect);
  }
  return theme($transaction->theme, $transaction);
}

/**
 * Menu callback, quickpaylite redirects to this url when the payment is declined.
 *
 * @param object $transaction
 *    The quickpaylite transaction object.
 */
function quickpaylite_transaction_cancel($transaction) {
  quickpaylite_create_log($transaction->transaction_id, 'canceled', 'User returned to the decline url');
  $transaction->theme = 'quickpaylite_decline_page';
  module_invoke($transaction->api_module, 'quickpayliteapi', 'transaction_cancel', $transaction->api_delta, $transaction);
  if (isset($transaction->redirect) && !empty($transaction->redirect)) {
    return drupal_goto($transaction->redirect);
  }
  return theme($transaction->theme, $transaction);
}

/**
 * Wrapper function to get the quickpaylite payment window and store info about the transaction.
 */
function _quickpaylite_get_standardwindow($data, $add_js) {
  if ($add_js === TRUE) {
    //drupal_set_html_head('<script type="text/javascript" src="http://www.quickpaylite.dk/js/standardwindow.js"></script>');
    drupal_add_js(drupal_get_path('module', 'quickpaylite') . '/quickpaylite.js');
  }
  return drupal_get_form('quickpaylite_standard_window_form', $data);
}

/**
 * Form to create a form for the standard window.
 *
 * @param array $settings
 *  An array containing all the settings - info stored from the admin backend.
 * @param array $data
 *    The actual data for the transaction, like the amount etc.
 *
 * @return array $form
 *    Returns the form definition array.
 */
function quickpaylite_standard_window_form($form_state, $data) {
  global $base_url;
  $hash = $data['hash'];

  $md5_order = array(
    'protocol',
    'msgtype',
    'merchant',
    'language',
    'ordernumber',
    'amount',
    'currency',
    'continueurl',
    'cancelurl',
    'callbackurl',
    'autocapture',
    'autofee',
    'cardtypelock',
    'description',
    'testmode',
  );

  $md5_string = "";
  foreach ($md5_order as $field) {
    $md5_string .= $data[$field];
  }
  $md5check = md5($md5_string . variable_get('quickpaylite_secret', ''));

  $form = array(
    '#action' => QUICKPAYLITE_PAYMENT_WINDOW,
    '#id' => "quickpaylite",
  );

  $form['merchant'] = array(
    '#type' => 'hidden',
    '#value' => $data['merchant'],
  );

  $form['msgtype'] = array(
    '#type' => 'hidden',
    '#value' => $data['msgtype'],
  );

  $form['language'] = array(
    '#type' => 'hidden',
    '#value' => $data['language'],
  );

  $form['ordernumber'] = array(
    '#type' => 'hidden',
    '#value' => $data['ordernumber'],
  );

  $form['amount'] = array(
    '#type' => 'hidden',
    '#value' => $data['amount'],
  );

  $form['currency'] = array(
    '#type' => 'hidden',
    '#value' => $data['currency'],
  );

  $form['continueurl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/quickpaylite/accept/$hash",
  );

  $form['cancelurl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/quickpaylite/decline/$hash",
  );

  $form['callbackurl'] = array(
    '#type' => 'hidden',
    '#value' => "$base_url/payment/quickpaylite/callback/$hash",
  );

  $form['autocapture'] = array(
    '#type' => 'hidden',
    '#value' => $date['autocapture'],
  );

  $form['autofee'] = array(
    '#type' => 'hidden',
    '#value' => $date['autofee'],
  );

  $form['cardtypelock'] = array(
    '#type' => 'hidden',
    '#value' => $data['cardtypelock'],
  );

  $form['description'] = array(
    '#type' => 'hidden',
    '#value' => $data['description'],
  );

  $form['testmode'] = array(
    '#type' => 'hidden',
    '#value' => $data['testmode'],
  );

  $form['md5check'] = array(
    '#type' => 'hidden',
    '#value' => $data['quickpaylite_group'],
  );

  // Executing the hook_quickpayliteapi_form_alter
  $func = $data['api_module'] .'_quickpaylite_form_alter';
  if (function_exists($func)) {
    $func($form, $data['api_delta']);
  }

  return $form;
}


/**
 * Returns a list of all quickpay supported payment methods.
 */
function quickpaylite_all_cards() {
  return array(
    'dan' => t('Dankort'),
    'edan' => t('eDankort'),
    'visa' => t('Visa'),
  );
  
$tmp =
"dankort:dan:Dankort:dan.jpg
edankort:edan:eDankort:edan.jpg
visa:visa:Visa:visa.jpg
visa-dk::Visa, issued in Denmark:visa.jpg
3d-visa::Visa, issued in Denmark, using 3D-Secure:3d-visa.gif
3d-visa-dk::Visa, using 3D-Secure:3d-visa.gif
visa-electron:visael:Visa Electron:visaelectron.jpg
visa-electron-dk::Visa Electron, issued in Denmark:visaelectron.jpg
3d-visa-electron::Visa Electron, using 3D-Secure:
3d-visa-electron-dk::Visa Electron, issued in Denmark, using 3D-Secure:
mastercard:mastercard:Mastercard:mastercard.jpg
mastercard-dk::Mastercard, issued in Denmark:mastercard.jpg
3d-mastercard::Mastercard, using 3D-Secure:
3d-mastercard-dk::Mastercard, issued in Denmark, using 3D-Secure:
3d-maestro:maestro:Maestro:3d-maestro.gif
3d-maestro-dk::Maestro, issued in Denmark:3d-maestro.gif
jcb:jcb:JCB:jcb.jpg
3d-jcb::JCB, using 3D-Secure:3d-jcb.gif
diners:din:Diners:diners.jpg
diners-dk::Diners, issued in Denmark:diners.jpg
american-express:amex:American Express:amexpress.jpg
american-express-dk::American Express, issued in Denmark:amexpress.jpg
danske-dk:danskebank:Danske Netbetaling:danskebank.jpg
nordea-dk:nordea:Nordea Netbetaling:nordea.jpg
fbg1886:ff:Forbrugsforeningen:forbrugsforeningen.gif
ikano:ikano:Ikano:ikano.jpg";

}

/**
 * Wrapper function to get the quickpaylite payment window and store info about the transaction.
 */
function _quickpaylite_get_paymentwindow($data, $add_js) {
  if ($add_js === TRUE) {
    drupal_add_js(drupal_get_path('module', 'quickpaylite') . '/quickpaylite.js');
  }
  return drupal_get_form('quickpaylite_standard_window_form', $data);
}