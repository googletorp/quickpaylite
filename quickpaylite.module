<?php
// $Id$

/**
 * @file
 * Provides a simple integration of Quickpay payment
 *
 * This is the simple method with HTML templates and such that doesn't require
 * you to have an SSL certificate. The payment page is routed through Quickpay's
 * SSL proxy.
 */

/**
 * Implementation of hook_menu().
 */
function quickpaylite_menu() {
  $items = array();

  $items['admin/quickpaylite'] = array(
    'title' => 'Quickpay lite',
    'description' => 'List Quickpay lite payments',
    'page callback' => 'quickpaylite_overview_pager',
    'access arguments' => array('administer Quickpay lite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['admin/quickpaylite/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/quickpaylite/settings'] = array(
    'title' => 'Quickpay lite settings',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quickpaylite_settings_form'),
    'access arguments' => array('administer Quickpay lite'),
    'file' => 'quickpaylite.admin.inc',
  );

  $items['payment/%quickpaylite_payment'] = array(
    'title' => 'Pay your order',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_page_start',
    'page arguments' => array(1, TRUE),
    'access arguments' => array('make payments with Quickpay lite'),
    'file' => 'quickpaylite.pages.inc',
  );

  $items['payment/%quickpaylite_payment/success'] = array(
    'title' => 'Payment successful',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_page_success',
    'page arguments' => array(1, TRUE),
    'access arguments' => array('make payments with Quickpay lite'),
    'file' => 'quickpaylite.pages.inc',
  );

  $items['payment/%quickpaylite_payment/error'] = array(
    'title' => 'Payment error',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_page_error',
    'page arguments' => array(1, TRUE),
    'access arguments' => array('make payments with Quickpay lite'),
    'file' => 'quickpaylite.pages.inc',
  );

  $items['payment/%quickpaylite_payment/result'] = array(
    'title' => 'Quickpay endpoint',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_page_result',
    'page arguments' => array(1, TRUE),
    'access callback' => TRUE,
    'file' => 'quickpaylite.pages.inc',
  );

  $items['payment/pbs-unavailable'] = array(
    'title' => 'PBS unavailable',
    'type' => MENU_CALLBACK,
    'page callback' => 'quickpaylite_page_pbs_unavailable',
    'access arguments' => array('make payments with Quickpay lite'),
    'file' => 'quickpaylite.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access.
 */
function quickpaylite_perm() {
  return array('administer Quickpay lite', 'make payments with Quickpay lite');
}

/**
 * Implementation of hook_theme().
 *
 * Returns information about every themable function defined by the module.
 */
function quickpaylite_theme() {
  $items = array();
  $items['quickpaylite_overview_form'] = array(
    'arguments' => array('form' => array()),
    'file' => 'quickpaylite.admin.inc',
  );
  $items['quickpaylite_record'] = array(
    'arguments' => array('record' => array()),
    'file' => 'quickpaylite.pages.inc',
  );
  return $items;
}

/**
 * Loader function for individual records.
 *
 * Because we use '%quickpaylite_payment' as a wildcard in our hook_menu()
 * handler, this function will also be called automatically when we go to edit
 * or delete a record. Thanks, Menu API!.
 *
 * @param $string
 *   Either an int containing the ID of a record or the record's hash.
 * @param $hash_only
 *   If set, try loading from a hash value only, for security. Default FALSE.
 * @return
 *   A single record in object format, or FALSE if none matched the incoming ID.
 */
function quickpaylite_payment_load($string, $hash_only = FALSE) {
  // SHA-1 hashes as hex are 40 characters
  if (strlen($string) == 40) {
    $sql = "SELECT * FROM {quickpaylite_payment} WHERE hash = '%s'";
  }
  elseif (!$hash_only && is_numeric($string) && $string > 0) {
    $sql = "SELECT * FROM {quickpaylite_payment} WHERE payment_id = %d";
  }
  else {
    return FALSE;
  }

  $result = db_query($sql, $string);
  if ($record = db_fetch_object($result)) {
    return $record;
  }
  else {
    return FALSE;
  }
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * Automatically inserts or updates, based on whether the record's unique ID has
 * been set yet. Because drupal_write_record() updates the record itself (adding
 * the unique ID after the database has been updated), we return the record
 * after saving it.
 *
 * This allows any calling function to check the id of the returned record and
 * act on the ID as needed (redirecting to a 'view' page after inserting, etc).
 *
 * @param $record
 *   A record to be saved. If $record['payment_id'] is set, the record will be updated.
 *   Otherwise, a new record will be inserted into the database.
 * @return
 *   The saved record, with its ID set.
 */
function quickpaylite_payment_save($payment) {
  if (isset($payment['payment_id'])) {
    drupal_write_record('quickpaylite_payment', $payment, 'payment_id');
  }
  else {
    drupal_write_record('quickpaylite_payment', $payment);
  }
  return $payment;
}

/**
 * Writes a new entry to the log with data from the result page
 */
function quickpaylite_log_write($entry) {
  drupal_write_record('quickpaylite_log', $entry);

  return $entry;
}

/**
 * Returns a list of all quickpay supported payment methods.
 */
function quickpaylite_all_cards() {
  return array(
    'dan' => t('Dankort'),
    'edan' => t('eDankort'),
    'visa' => t('Visa'),
  );
  
$tmp =
"dankort:dan:Dankort:dan.jpg
edankort:edan:eDankort:edan.jpg
visa:visa:Visa:visa.jpg
visa-dk::Visa, issued in Denmark:visa.jpg
3d-visa::Visa, issued in Denmark, using 3D-Secure:3d-visa.gif
3d-visa-dk::Visa, using 3D-Secure:3d-visa.gif
visa-electron:visael:Visa Electron:visaelectron.jpg
visa-electron-dk::Visa Electron, issued in Denmark:visaelectron.jpg
3d-visa-electron::Visa Electron, using 3D-Secure:
3d-visa-electron-dk::Visa Electron, issued in Denmark, using 3D-Secure:
mastercard:mastercard:Mastercard:mastercard.jpg
mastercard-dk::Mastercard, issued in Denmark:mastercard.jpg
3d-mastercard::Mastercard, using 3D-Secure:
3d-mastercard-dk::Mastercard, issued in Denmark, using 3D-Secure:
3d-maestro:maestro:Maestro:3d-maestro.gif
3d-maestro-dk::Maestro, issued in Denmark:3d-maestro.gif
jcb:jcb:JCB:jcb.jpg
3d-jcb::JCB, using 3D-Secure:3d-jcb.gif
diners:din:Diners:diners.jpg
diners-dk::Diners, issued in Denmark:diners.jpg
american-express:amex:American Express:amexpress.jpg
american-express-dk::American Express, issued in Denmark:amexpress.jpg
danske-dk:danskebank:Danske Netbetaling:danskebank.jpg
nordea-dk:nordea:Nordea Netbetaling:nordea.jpg
fbg1886:ff:Forbrugsforeningen:forbrugsforeningen.gif
ikano:ikano:Ikano:ikano.jpg";

}
